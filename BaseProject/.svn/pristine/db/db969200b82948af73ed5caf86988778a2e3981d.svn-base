//
//  PersonalCenterController.m
//  BaseProject
//
//  Created by 曹老师 on 2018/8/6.
//  Copyright © 2018年 众利创投. All rights reserved.
//

#import "PersonalCenterController.h"
#import <UIImageView+WebCache.h>
#import "SnailPopupController.h"
#import "LDImagePicker.h"
#import "ContractwoView.h"
#import "MineChangeInfoController.h"
#import <UIButton+WebCache.h>
#import "AddressModel.h"
#import "AddressPickerView.h"

@interface PersonalCenterController ()<LDImagePickerDelegate, AddressPickerViewDelegate> {
    //用户信息单例
    UserInformation *userInfo;
    
}
@property (nonatomic, strong) ContractwoView *contractView;
@property (strong, nonatomic) UIImage *icon;
@property (strong, nonatomic) AddressPickerView *addressViews;  // 地址选取

@end

@implementation PersonalCenterController




- (void)viewDidLoad {
    [super viewDidLoad];
    
    //导航栏标题
    self.title = @"个人资料";
    self.view.backgroundColor=Background_Color;
    
    _top.constant = Nav_Height;
    _width.constant = kScreenWidth;
    
    
    if(@available(iOS 11.0, *)){
        _mainView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
    }
    self.automaticallyAdjustsScrollViewInsets = NO;
    
    _headIcon.layer.cornerRadius = 25;
    _headIcon.layer.borderWidth = 3;
    _headIcon.layer.borderColor = Background_Color.CGColor;
    _headIcon.clipsToBounds = YES;
    
    //初始化
    userInfo = [UserInformation sharedInstance];
    

    // 头像
    [_headButton addTarget:self action:@selector(btnImageHead:) forControlEvents:UIControlEventTouchUpInside];
    // 所在地
    [_locationButton addTarget:self action:@selector(btnAddress:) forControlEvents:UIControlEventTouchUpInside];
    
    
    
    
    
    
    
}


- (void)viewWillAppear:(BOOL)animated {
    
    [super viewWillAppear:animated];
    
    [self loadUserInfoAction];
    
    
}



- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    
    if (_addressViews) {
        [_addressViews removeFromSuperview];
        _addressViews = nil;
    }
}


- (void)close {
    [self.sl_popupController dismiss];
}


- (ContractwoView *)contractView {
    if (!_contractView) {
        _contractView =  [ContractwoView viewFromNIB];
        _contractView.frame = CGRectMake((SCREEN_WIDTH-300)/2.0, (SCREEN_HEIGHT-160)/2.0, 300, 160);
        [_contractView.phoneBtn1 addTarget:self action:@selector(phoneBtn1) forControlEvents:UIControlEventTouchUpInside];
        [_contractView.phoneBtn2 addTarget:self action:@selector(phoneBtn2) forControlEvents:UIControlEventTouchUpInside];
    }
    return _contractView;
}

- (AddressPickerView *)addressViews {
    
    if (!_addressViews) {
        
        _addressViews = [[AddressPickerView alloc] initWithFrame:CGRectMake(0, kScreenHeight, kScreenWidth, kScreenHeight)];
        [_addressViews.cancelButton addTarget:self action:@selector(closeAddressViewAction) forControlEvents:UIControlEventTouchUpInside];
        [_addressViews.cancelButton2 addTarget:self action:@selector(closeAddressViewAction) forControlEvents:UIControlEventTouchUpInside];
        _addressViews.delegate = self;
        [[UIApplication sharedApplication].keyWindow addSubview:_addressViews];
    }
    
    [UIView animateWithDuration:.35 animations:^{
        _addressViews.transform = CGAffineTransformMakeTranslation(0, -kScreenHeight);
        self.navigationController.view.alpha = 0.5;
    }];
    
    return _addressViews;
    
    
    
}



#pragma mark ========================================生命周期========================================


#pragma mark ========================================动作响应=============================================


#pragma mark - 点击头像
-(void)btnImageHead:(UIButton *)sender{
    
    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
    self.sl_popupController = [SnailPopupController new];
    self.sl_popupController.maskAlpha = 0.5;
    [self.sl_popupController presentContentView:self.contractView duration:0.5 elasticAnimated:YES];
    
}



// 相册弹出框
-(void)phoneBtn1{
    
    dispatch_async(dispatch_get_main_queue(), ^{
        [self close];
        //打开相机
        LDImagePicker *imagePicker = [LDImagePicker sharedInstance];
        imagePicker.delegate = self;
        [imagePicker showImagePickerWithType:ImagePickerCamera InViewController:self Scale:1];
    });
    
}
-(void)phoneBtn2{
    dispatch_async(dispatch_get_main_queue(), ^{
        [self close];
        //打开手机相册
        LDImagePicker *imagePicker = [LDImagePicker sharedInstance];
        imagePicker.delegate = self;
        [imagePicker showImagePickerWithType:ImagePickerPhoto InViewController:self Scale:1];
    });
    
}

#pragma mark - 更换昵称
- (void)changeNickName:(UIButton *)button
{
    MineChangeInfoController *vc = [[UIStoryboard storyboardWithName:@"Mine" bundle:nil] instantiateViewControllerWithIdentifier:@"MineChangeInfoController"];
    vc.type = 0;
    __weak typeof(self) weakSelf = self;
    vc.finishBlock = ^{
        [weakSelf loadUserInfoAction];
    };
    [self.navigationController pushViewController:vc animated:YES];
}

// 邮箱
-(void)zhanghuLiuBtn:(UIButton *)sender
{
    MineChangeInfoController *vc = [[UIStoryboard storyboardWithName:@"Mine" bundle:nil] instantiateViewControllerWithIdentifier:@"MineChangeInfoController"];
    vc.type = 1;
    __weak typeof(self) weakSelf = self;
    vc.finishBlock = ^{
        [weakSelf loadUserInfoAction];
    };
    [self.navigationController pushViewController:vc animated:YES];
}
// QQ
-(void)QQBtn:(UIButton *)sender{
    
    MineChangeInfoController *vc = [[UIStoryboard storyboardWithName:@"Mine" bundle:nil] instantiateViewControllerWithIdentifier:@"MineChangeInfoController"];
    vc.type = 2;
    __weak typeof(self) weakSelf = self;
    vc.finishBlock = ^{
        [weakSelf loadUserInfoAction];
    };
    [self.navigationController pushViewController:vc animated:YES];
    
}

#pragma mark - 选择所在地
-(void)btnAddress:(UIButton *)sender{
    
    sender.userInteractionEnabled = NO;
    
    if (userInfo.locationArray.count > 0) {

        // 已经获取到了数据，不用再次获取
        sender.userInteractionEnabled = YES;

        self.addressViews.dataArray1 = userInfo.locationArray;


    } else {

        // 获取列表s
        [self loadAddressAction];
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            sender.userInteractionEnabled = YES;
        });

    }
    
    
    
    
}


#pragma mark - 获取省市区
- (void)loadAddressAction {
    

    
    //发送soap请求
    [SOAPUrlSession SOAPDataWithMethod:@"GetAreaList" parameter:nil success:^(id responseObject) {
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            
            
            // 解析省市区地址
            NSArray *list = responseObject[@"Data"];
            for (NSDictionary *dic1 in list) {
                AddressModel *model1 = [AddressModel mj_objectWithKeyValues:dic1];
                [model1.ChirldData removeAllObjects];
                
                NSArray *list1 = dic1[@"ChirldData"];
                if (list1.count > 0) {
                    
                    for (NSDictionary *dic2 in list1) {
                        AddressModel *model2 = [AddressModel mj_objectWithKeyValues:dic2];
                        [model2.ChirldData removeAllObjects];
                        
                        NSArray *list2 = dic2[@"ChirldData"];
                        if (list2.count > 0) {
                            
                            for (NSDictionary *dic3 in list2) {
                                AddressModel *model3 = [AddressModel mj_objectWithKeyValues:dic3];
                                [model2.ChirldData addObject:model3];
                            }
                            
                        }
                        
                        
                        [model1.ChirldData addObject:model2];
                    }
                    
                }
                
                [userInfo.locationArray addObject:model1];
            }
            
            //主线程更新视图
            dispatch_async(dispatch_get_main_queue(), ^{
                
                self.addressViews.dataArray1 = userInfo.locationArray;
                
            });
            
            
        } else {
            dispatch_async(dispatch_get_main_queue(), ^{
                
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:responseObject[@"Message"]];
                
            });
            
        }
    } failure:^(NSError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            
            //后台连接直接不成功，弹出“连接服务器失败”
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"网络异常：连接服务器失败"];
        });
        
    }];
    
}


#pragma mark - 关闭选择地址
- (void)closeAddressViewAction {
    
    if (_addressViews) {
        [UIView animateWithDuration:.35 animations:^{
            _addressViews.transform = CGAffineTransformMakeTranslation(0, 0);
            self.navigationController.view.alpha = 1;
        } completion:^(BOOL finished) {
            [_addressViews removeFromSuperview];
            _addressViews = nil;
        }];
    }
    
}


#pragma mark ========================================网络请求=============================================

#pragma mark - 获取用户信息，刷新UI
- (void)loadUserInfoAction {
    
    [SVProgressHUD showWithStatus:@"个人资料加载中"];
    
    
    NSString *method = [NSString stringWithFormat:@"GetEntityUser"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         userInfo.UserId,@"UserId",
                         nil];
    
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
        
        NSString *code = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([code isEqualToString:@"200"]) {
            
            userInfo = [UserInformation mj_objectWithKeyValues:responseObject[@"Data"]];
            
            UIImage *_icon;
            if (userInfo.Gender.integerValue == 0) {
                _icon = [UIImage imageNamed:@"boy"];
            } else {
                _icon = [UIImage imageNamed:@"girl"];
            }

            
            // 头像
            if ([userInfo.HeadIcon isEqualToString:@""] || userInfo.HeadIcon == nil) {
                //无自定义头像，则使用默认头像
                _headIcon.image = _icon;
            } else {
                //有自定义头像，则下载并显示
                NSString *path = [NSString stringWithFormat:@"%@%@", Image_Base_URL, userInfo.HeadIcon];
                [_headIcon sd_setImageWithURL:[NSURL URLWithString:path]
                             placeholderImage:_icon
                                      options:SDWebImageRetryFailed];
            }
            

            
            // 昵称
            [_nameButton addTarget:self action:@selector(changeNickName:) forControlEvents:UIControlEventTouchUpInside];
            if (userInfo.NickName == nil || [userInfo.NickName isEqualToString:@""]) {
                _nameLabel.text = @"未设置";
            } else {
                _nameLabel.text = userInfo.NickName;
            }
            
            // 性别
            if (userInfo.Gender == nil || [userInfo.Gender isEqualToString:@""]) {
                _sexLabel.text = @"未设置";
                _sexLabel.textColor=CRGB(128, 128, 128, 1);
            } else {
                _sexLabel.text = [userInfo.Gender isEqualToString:@"0"] ? @"男" : @"女";
                _sexLabel.textColor=[UIColor blackColor];
            }
            
            //邮箱
            [_emalButton addTarget:self action:@selector(zhanghuLiuBtn:) forControlEvents:UIControlEventTouchUpInside];
            
            if (userInfo.Email == nil || [userInfo.Email isEqualToString:@""]) {
                _emalLabel.text = @"未设置";
            } else {
                _emalLabel.text = userInfo.Email;
            }
            
            //QQ
            [_qqButton addTarget:self action:@selector(QQBtn:) forControlEvents:UIControlEventTouchUpInside];
            if (userInfo.QICQ == nil || [userInfo.QICQ isEqualToString:@""]) {
                _qqLabel.text =@"未设置";
            } else {
                _qqLabel.text = userInfo.QICQ;
            }
            
            //生日
            if (userInfo.Birthday != nil && ![userInfo.Birthday isEqualToString:@""]) {
                _birthLabel.text = userInfo.Birthday;
            } else {
                _birthLabel.text = @"未实名";
            }

            // 地址
            NSString *address = [NSString stringWithFormat:@"%@%@%@%@", userInfo.ProvinceName, userInfo.CityName, userInfo.CountyName, userInfo.Address];
            _locationLabel.text = address;
            
            
        }
        
        [SVProgressHUD dismiss];
        
    } failure:^(NSError *error) {
        
        [SVProgressHUD dismiss];
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"网络异常：连接服务器失败"];
        
    }];
    
    
    
    
    

    
}



#pragma mark ========================================代理方法=============================================

#pragma mark UIImagePickerControllerDelegate委托方法

- (void)imagePickerDidCancel:(LDImagePicker *)imagePicker{
    
    
}
//新！图片选择完毕
- (void)imagePicker:(LDImagePicker *)imagePicker didFinished:(UIImage *)editedImage {
    
    
    //上传头像
    NSData *imageData = UIImageJPEGRepresentation(editedImage, 0.1);
    [SVProgressHUD showWithStatus:@"更新头像中"];

    [SOAPUrlSession SOAPDataWithMethod:@"UpLoadImg" idCode:userInfo.EnCode imageKey:@"HeadIcon" imageData:imageData success:^(id responseObject) {
        
        //-------------------------------更新数据源-------------------------------
        NSDictionary *responseDic = responseObject;
        NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            
            //操作成功，接口封装返回的数据对象
            NSDictionary *dataDic = responseObject[@"Data"];
            
            //将上传的头像地址赋值给本地userInfo
            [UserInformation sharedInstance].HeadIcon = dataDic[@"FilePath"];
            
            //更新对应的后台方法
            NSString *method1 = [NSString stringWithFormat:@"UpdateUserEntity"];
            //需要的参数
            NSDictionary *dic1 = [NSDictionary dictionaryWithObjectsAndKeys:
                                 userInfo.UserId,@"UserId",   //
                                 @"HeadIcon",@"Action", //修改类别
                                 userInfo.HeadIcon,@"ActionValue", //修改值
                                 nil];
            [SOAPUrlSession SOAPDataWithMethod:method1 parameter:dic1 success:^(id responseObject) {
                
                //返回成功时
                NSDictionary *responseDic = responseObject;
                NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
                
                //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
                NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
                
                if ([responseCode isEqualToString:@"200"]) {
                    
                    // 更新用户信息
                    [self loadUserInfoAction];
                } else {
                    
                    //根据后端定义的错误编码，返回不同的提示
                    NSLog(@"头像上传失败");
                    
                }
            } failure:^(NSError *error) {
                //后台连接直接不成功，弹出“连接服务器失败”
                NSLog(@"网络异常：连接服务器失败");
            }];
            
        } else {
            //根据后端定义的错误编码，返回不同的提示
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:responseDic[@"Message"]];
        }
        
        [SVProgressHUD dismiss];
    } failure:^(NSError *error) {
        [SVProgressHUD dismiss];
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请求失败，请检查网络"];
    }];
}


#pragma mark - 选择了地址
- (void)AddressPickerViewSureActionProvince:(AddressModel *)model1 country:(AddressModel *)model2 city:(AddressModel *)model3 {
    
    [self closeAddressViewAction];
    
    NSString *ActionValue = [NSString stringWithFormat:@"%@%@%@|0|0", model1.AreaName, model2.AreaName, model3.AreaName];
    
    
    //UpdateUserEntity
    //[6]用户 => 变更用户基本信息(输入参数string Json)
    //UserId:用户编号
    //Action:修改信息( 提现密码-WithdrawPassword、昵称-NickName、头像-HeadIcon、邮箱-Email、QQ、籍贯-NativePlace(ProvinceId|CityId|CountyId)、详细地址-Address(Address|Precision|Latitude)、实名认证-RealName(RealName|IDCard)、性别-Gender、生日-Birthday)
    //ActionValue:值
    
    
    NSString *method = [NSString stringWithFormat:@"UpdateUserEntity"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         userInfo.UserId,@"UserId",
                         @"Address",@"Action",
                         ActionValue,@"ActionValue",
                         
                         nil];
    
    [SVProgressHUD showWithStatus:@"更新地址中"];

    //发送soap请求
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            
            [self loadUserInfoAction];
            
            
        }
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:responseObject[@"Message"]];
            
        });
            
        [SVProgressHUD dismiss];
    } failure:^(NSError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            
            //后台连接直接不成功，弹出“连接服务器失败”
            [SVProgressHUD dismiss];
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"网络异常：连接服务器失败"];
        });
        
    }];
    
    
}

















@end
