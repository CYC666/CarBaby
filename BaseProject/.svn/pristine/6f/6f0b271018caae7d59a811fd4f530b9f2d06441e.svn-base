//
//  RegistController.m
//  BaseProject
//
//  Created by 曹老师 on 2018/8/20.
//  Copyright © 2018年 众利创投. All rights reserved.
//

#import "RegistController.h"
#import "EncryptForInterface.h"

@interface RegistController () {
    BOOL verificationFlag;
    NSString *codeStr;
    dispatch_source_t _timer;
    UserInformation *userInfo;              // 用户信息单例

}

@end

@implementation RegistController


#pragma mark ========================================生命周期========================================
- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.navBar.title.hidden = YES;
    userInfo = [UserInformation sharedInstance];
    
    [_agreeButton setImage:[UIImage imageNamed:@"组3"] forState:UIControlStateNormal];
    [_agreeButton setImage:[UIImage imageNamed:@"组3_23"] forState:UIControlStateSelected];
    
    _nextButton.layer.borderWidth = 1;
    _nextButton.layer.borderColor = _nextButton.titleLabel.textColor.CGColor;
    
    _codeButton.layer.borderWidth = 1;
    _codeButton.layer.borderColor = _codeButton.titleLabel.textColor.CGColor;
    
    [_nextButton addTarget:self action:@selector(nextButtonAction:) forControlEvents:UIControlEventTouchUpInside];
    [_registButton addTarget:self action:@selector(registButtonAction:) forControlEvents:UIControlEventTouchUpInside];
    [_agreeButton addTarget:self action:@selector(agreeButtonAction:) forControlEvents:UIControlEventTouchUpInside];
}


#pragma mark - 验证码的倒计时
- (void)codeButtonActive {
    
    __block int timeout=120; //倒计时时间
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
    dispatch_source_set_event_handler(_timer, ^{
        if(timeout<=0){ //倒计时结束，关闭
            
            dispatch_source_cancel(_timer);
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                [_codeButton setTitle:@"发送验证码" forState:UIControlStateNormal];
                
                //上一次获取的验证码失效
                codeStr = @"验证码失效";
                
                verificationFlag = NO;
                _codeButton.enabled = YES;
                
            });
        }else{
            
            NSString *strTime = [NSString stringWithFormat:@"%d秒后再发送", timeout];
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                [_codeButton setTitle:strTime forState:UIControlStateNormal];
                
                //验证码倒计时有效期标志位
                verificationFlag = YES;
                
                //按钮不可点击
                _codeButton.enabled = NO;
            });
            timeout--;
        }
    });
    dispatch_resume(_timer);
    
}

#pragma mark ========================================动作响应=============================================

#pragma mark - 同意协议
- (void)agreeButtonAction:(UIButton *)button {
    
    button.selected = !button.selected;
    
}

#pragma mark - 下一步
- (void)nextButtonAction:(UIButton *)button {
    
    // 勾选协议
    if (!_agreeButton.selected) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"需要同意协议"];
        return;
    }
    
    //校验手机号码
    if (! [SmallFunctionTool checkTelNumber:_phoneField.text]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请输入正确的手机号码"];
        return;
    }
    
    if ([_codeField.text isEqualToString:@""]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请输入验证码"];
        return;
    }
    if(![codeStr isEqualToString:_codeField.text]) {
        //弹出验证码输入错误的提示
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"验证码不正确"];
        return;
    }
    
    [UIView animateWithDuration:.35 animations:^{
        _view2.transform = CGAffineTransformMakeTranslation(-kScreenWidth, 0);
    }];
    
}

#pragma mark - 获取验证码
- (void)codeButtonAction:(UIButton *)button {
    
    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];
    
    //校验手机号码
    if (![SmallFunctionTool checkTelNumber:_phoneField.text]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请输入正确的手机号码"];
        return;
    }
    
    
    
    NSString *method = [NSString stringWithFormat:@"sms/getMsg"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         _phoneField.text,@"phone",
                         @"REG",@"types",  // 类型( REG//注册, EDIT//修改手机号,BD//绑定新手机号，SIGN//注册，FORGET//忘记密码)
                         nil];
    
    
    button.userInteractionEnabled = NO;
    [SVProgressHUD showWithStatus:@"获取验证码中"];
    
    [SOAPUrlSession AFHTTPSessionManager:method parameter:dic success:^(id responseObject) {
        
        NSString *code = [NSString stringWithFormat:@"%@", responseObject[@"code"]];
        if ([code isEqualToString:@"200"]) {
            
            codeStr = [NSString stringWithFormat:@"%@", responseObject[@"data"]];
            //主线程更新视图
            dispatch_async(dispatch_get_main_queue(), ^{
                
                
                [self codeButtonActive];
                
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:@"已发送验证码"];
                
            });
            
        } else {
            
            //主线程更新视图
            dispatch_async(dispatch_get_main_queue(), ^{
                
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:[NSString stringWithFormat:@"%@", responseObject[@"msg"]]];
                
            });
            
        }
        
        
        button.userInteractionEnabled = YES;
        [SVProgressHUD dismiss];
        
    } failure:^(NSError *error) {
        
        //后台连接直接不成功，弹出“连接服务器失败”
        button.userInteractionEnabled = YES;
        [SVProgressHUD dismiss];
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"网络异常：连接服务器失败"];
    }];
    
    
}

#pragma mark - 执行注册
- (void)registButtonAction:(UIButton *)button {
    
    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];
    
    
    
    
    
    //登录密码text校验
    NSString *checkPasswordStr = [SmallFunctionTool checkOutPasswordText:_passwordField1.text withTextName:@"密码"];
    if (checkPasswordStr != nil) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:checkPasswordStr];
        return;
    }
    
    
    //    //判断短信验证码是否一致
    //    if (![_registCodeField.text isEqualToString:code]) {
    //        //弹出验证码输入错误的提示
    //        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
    //        [showMessage showAlertWith:@"验证码错误，请重新输入"];
    //        return;
    //    }
    
    NSString *method = [NSString stringWithFormat:@"loginTwo/register"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         _phoneField.text,@"phone",
                         _passwordField1.text,@"password",
                         _codeField.text,@"sms_code",                               // 验证码
                         @"",@"referrer_code",    // 推荐码(可以为空)
                         nil];
    
    [SVProgressHUD showWithStatus:@"注册中"];
    button.userInteractionEnabled = NO;
    [SOAPUrlSession AFHTTPSessionManager:method parameter:dic success:^(id responseObject) {
        
        NSString *code = [NSString stringWithFormat:@"%@",responseObject[@"code"]];
        
        if ([code isEqualToString:@"200"]) {
            
            // 注册成功，登录
            NSString *method1 = [NSString stringWithFormat:@"loginTwo/login"];
            NSDictionary *dic1 = [NSDictionary dictionaryWithObjectsAndKeys:
                                  _phoneField.text,@"username",
                                  _passwordField1.text,@"password",
                                  nil];
            
            [SOAPUrlSession AFHTTPSessionManager:method1 parameter:dic1 success:^(id responseObject) {
                
                NSString *code = [NSString stringWithFormat:@"%@",responseObject[@"code"]];
                
                if ([code isEqualToString:@"200"]) {
                    
                    userInfo = [UserInformation mj_objectWithKeyValues:responseObject[@"data"][@"user"]];
                    
                    //7天内记住用户登录状态，将时间和useId存入NSUserDefaults
                    {
                        //获取当前时间
                        NSString *nowTime = [SmallFunctionTool transitionDateToString:[NSDate date]];
                        //加密userId
                        NSString *encryptStr = [EncryptForInterface encryptWithText:_phoneField.text];
                        NSString *PassWord = [EncryptForInterface encryptWithText:_passwordField1.text];
                        
                        //存入NSUserDefaults文件中
                        NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
                        [userDefaults setObject:nowTime forKey:@"LoginDate"];
                        [userDefaults setObject:encryptStr forKey:@"LoginUserId"];
                        [userDefaults setObject:PassWord forKey:@"PassWord"];
                        [userDefaults synchronize]; //立即同步
                    }
                    
                    // 登陆成功
                    [self.navigationController dismissViewControllerAnimated:YES completion:nil];
                } else {
                    
                    // 登录失败
                    dispatch_async(dispatch_get_main_queue(), ^{
                        
                        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                        [showMessage showAlertWith:[NSString stringWithFormat:@"%@", responseObject[@"msg"]]];
                        
                    });
                }
                
            } failure:^(NSError *error) {
                
                //后台连接直接不成功，弹出“连接服务器失败”
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:@"网络异常：连接服务器失败"];
            }];
            
        } else {
            
            // 注册失败
            dispatch_async(dispatch_get_main_queue(), ^{
                
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:[NSString stringWithFormat:@"%@", responseObject[@"msg"]]];
                
            });
            
        }
        
        [SVProgressHUD dismiss];
        button.userInteractionEnabled = YES;
        
    } failure:^(NSError *error) {
        
        //后台连接直接不成功，弹出“连接服务器失败”
        button.userInteractionEnabled = YES;
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"网络异常：连接服务器失败"];
        [SVProgressHUD dismiss];
    }];
    
}


#pragma mark ========================================网络请求=============================================


#pragma mark ========================================代理方法=============================================







































@end
