//
//  ChangePhoneNextController.m
//  BaseProject
//
//  Created by 曹老师 on 2018/8/8.
//  Copyright © 2018年 众利创投. All rights reserved.
//

#import "ChangePhoneNextController.h"


@interface ChangePhoneNextController () <UITextFieldDelegate> {
    
    dispatch_source_t _timer;
    NSString *codeStr;
    
}

@end

@implementation ChangePhoneNextController


#pragma mark ========================================生命周期========================================
- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.title = @"更换手机号";
    _top.constant = Nav_Height;
    _width.constant = kScreenWidth;
    
    
    if(@available(iOS 11.0, *)){
        _mainView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
    }
    self.automaticallyAdjustsScrollViewInsets = NO;
    
    _codeButton.layer.borderWidth = 1;
    _codeButton.layer.borderColor = _codeButton.titleLabel.textColor.CGColor;
    
    [_field1 becomeFirstResponder];
    _field1.delegate = self;
    _field2.delegate = self;
    [_sureButton addTarget:self action:@selector(sureButtonAction:) forControlEvents:UIControlEventTouchUpInside];
    [_codeButton addTarget:self action:@selector(loadCodeAction:) forControlEvents:UIControlEventTouchUpInside];
}


#pragma mark - 验证码的倒计时
- (void)codeButtonActive {
    
    __block int timeout=120; //倒计时时间
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    _timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0,queue);
    dispatch_source_set_timer(_timer,dispatch_walltime(NULL, 0),1.0*NSEC_PER_SEC, 0); //每秒执行
    dispatch_source_set_event_handler(_timer, ^{
        if(timeout<=0){ //倒计时结束，关闭
            
            dispatch_source_cancel(_timer);
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                [_codeButton setTitle:@"发送验证码" forState:UIControlStateNormal];
                
                //上一次获取的验证码失效
                codeStr = @"验证码失效";
                
                
                _codeButton.enabled = YES;
                
            });
        }else{
            
            NSString *strTime = [NSString stringWithFormat:@"%d秒后再发送", timeout];
            dispatch_async(dispatch_get_main_queue(), ^{
                //设置界面的按钮显示 根据自己需求设置
                [_codeButton setTitle:strTime forState:UIControlStateNormal];
                
                
                //按钮不可点击
                _codeButton.enabled = NO;
            });
            timeout--;
        }
    });
    dispatch_resume(_timer);
    
}


#pragma mark ========================================动作响应=============================================

#pragma mark - 获取验证码
- (void)loadCodeAction:(UIButton *)button {
    
    if (![SmallFunctionTool checkTelNumber:_field1.text]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"手机号不正确"];
        return;
    }
    
    NSString *method = [NSString stringWithFormat:@"GetMobileCode"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         _field1.text,@"Mobile",
                         @"更换后手机",@"Title",  // 发送类别(用户注册、密码找回、绑定手机、更换前手机、更换后手机)
                         nil];
    
    [self codeButtonActive];
    
    
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
        
        NSString *code = [NSString stringWithFormat:@"%@", responseObject[@"Code"]];
        if ([code isEqualToString:@"200"]) {
            
            codeStr = [NSString stringWithFormat:@"%@", responseObject[@"Data"][@"Code"]];
            //主线程更新视图
            dispatch_async(dispatch_get_main_queue(), ^{
                
                [self codeButtonActive];
                
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:@"已发送验证码"];
                
            });
            
        } else {
            
            //主线程更新视图
            dispatch_async(dispatch_get_main_queue(), ^{
                
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:[NSString stringWithFormat:@"%@", responseObject[@"Message"]]];
                
            });
            
        }
        
        
        button.userInteractionEnabled = YES;
        [SVProgressHUD dismiss];
        
    } failure:^(NSError *error) {
        
        //后台连接直接不成功，弹出“连接服务器失败”
        button.userInteractionEnabled = YES;
        [SVProgressHUD dismiss];
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"网络异常：连接服务器失败"];
    }];
    
}


#pragma mark - 确认
- (void)sureButtonAction:(UIButton *)button {
    
    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];
    
    if ([_field1.text isEqualToString:@""]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请输入手机号"];
        return;
    }
    
    if (![SmallFunctionTool checkTelNumber:_field1.text]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请输入正确手机号"];
        return;
    }
    
    if ([_field2.text isEqualToString:@""]) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请输入验证码"];
        return;
    }
    
    
    NSString *method = [NSString stringWithFormat:@"UpdateMobile"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         [UserInformation sharedInstance].UserId,@"UserId",
                         _field1.text,@"NewMobile",
                         nil];
    
    //发送soap请求
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            
            [self.navigationController popToRootViewControllerAnimated:1];
            
            
        }
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:responseObject[@"Message"]];
            
        });
        
        
    } failure:^(NSError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            
            //后台连接直接不成功，弹出“连接服务器失败”
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"网络异常：连接服务器失败"];
        });
        
    }];
    
    
    
    
}


#pragma mark ========================================网络请求=============================================


#pragma mark ========================================代理方法=============================================
- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    
    if ([textField isEqual:_field1]) {
        [_field2 becomeFirstResponder];
    } else {
        [self sureButtonAction:nil];
    }
    
    return YES;
}




@end
