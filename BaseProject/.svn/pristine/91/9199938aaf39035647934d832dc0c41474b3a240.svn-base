//
//  MainController.m
//  LFBaseFrameTwo
//
//  Created by 曹老师 on 2018/5/15.
//  Copyright © 2018年 admin. All rights reserved.
//

#import "MainController.h"
#import "MainListController.h"
#import "CYCnavController.h"
#import "EncryptForInterface.h"
#import "LoginController.h"

@interface MainController () {
    
    NavBar *navBar;
    UserInformation *userInfo;              // 用户信息单例

    
}

@property (strong, nonatomic) NSMutableArray *dataArray;   // 数据列表

@end


@implementation MainController



#pragma mark ========================================生命周期========================================

- (instancetype)initWithCoder:(NSCoder *)aDecoder {
    self = [super initWithCoder:aDecoder];
    if (self) {
        
        self.menuItemWidth = SCREEN_WIDTH/5.0;
        self.menuViewStyle = WMMenuViewStyleLine;
        self.titleSizeSelected = 15.0;
        self.titleSizeNormal = 14.0;
        self.titleColorSelected = Publie_Color;
        self.menuHeight = 50;
        self.progressHeight = 0.01;
        self.viewFrame = CGRectMake(0, Nav_Height, SCREEN_WIDTH, SCREEN_HEIGHT-Nav_Height-TabBar_Height);
        self.progressColor = [UIColor clearColor];
        self.menuBGColor = [UIColor whiteColor];
    }
    return self;
}


- (NSMutableArray *)dataArray {
    
    if (!_dataArray) {
        _dataArray = [NSMutableArray array];
    }
    return _dataArray;
    
}

- (void)viewDidLoad {
    
    [super viewDidLoad];
    
    navBar = [[NavBar alloc] initWithFrame:CGRectMake(0, 0, kScreenWidth, Nav_Height)];
    navBar.title.text = @"咨询";
    navBar.bottomLine.hidden = NO;
    [self.view addSubview:navBar];
    
    
}


- (void)viewWillAppear:(BOOL)animated {
    
    [super viewWillAppear:animated];
    
    [self checkLoginAction];
    
    
}


#pragma mark - 检测登录状态
- (void)checkLoginAction {
    
    /*
     * 判断是否有7天内的登录userId，有的话直接登录
     */
    
    if (userInfo.isLoginWithUserId) {
        // 已经登录
        
        
        NSString *method = [NSString stringWithFormat:@"appUser/detail"];
        NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                             userInfo,@"user_id",
                             nil];
        
        [SOAPUrlSession AFHTTPSessionManager:method parameter:dic success:^(id responseObject) {
            
            NSString *code = [NSString stringWithFormat:@"%@",responseObject[@"code"]];
            
            if ([code isEqualToString:@"200"]) {
                
                userInfo = [UserInformation mj_objectWithKeyValues:responseObject[@"data"][@"user"]];
                
            }
        } failure:^(NSError *error) {
            
            //后台连接直接不成功，弹出“连接服务器失败”
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"网络异常：连接服务器失败"];
        }];
        
        
        return;
    }
    
    //7天内记住用户登录状态，读取NSUserDefaults文件
    if ([[NSUserDefaults standardUserDefaults] objectForKey:@"LoginDate"] == nil ||
        [[NSUserDefaults standardUserDefaults] objectForKey:@"LoginUserId"] == nil) {
        
        NSLog(@"没有登录记录，正常登录");
        
        CYCnavController *nav = [[CYCnavController alloc] initWithRootViewController:[[LoginController alloc] init]];
        [self presentViewController:nav animated:YES completion:nil];
        
    } else {
        //登录时间
        NSString *loginDate = [[NSUserDefaults standardUserDefaults] objectForKey:@"LoginDate"];
        
        if ([SmallFunctionTool timeDifferenceForNow:loginDate] > (3600 * 24 * 7)) {
            NSLog(@"没有7天内的登录记录，正常登录");
            
            CYCnavController *nav = [[CYCnavController alloc] initWithRootViewController:[[LoginController alloc] init]];
            [self presentViewController:nav animated:YES completion:nil];
            
        } else {
            
            //登录id
            NSString *loginUserId = [[NSUserDefaults standardUserDefaults] objectForKey:@"LoginUserId"];
            NSString *passWord = [[NSUserDefaults standardUserDefaults] objectForKey:@"PassWord"];
            
            NSString *username = [EncryptForInterface decryptWithText:loginUserId];
            NSString *password = [EncryptForInterface decryptWithText:passWord];
            
            // 登录，获取个人信息
            NSString *method = [NSString stringWithFormat:@"loginTwo/login"];
            NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                                 username,@"username",
                                 password,@"password",
                                 nil];
            
            [SVProgressHUD showWithStatus:@"登录中"];
            
            [SOAPUrlSession AFHTTPSessionManager:method parameter:dic success:^(id responseObject) {
                
                NSString *code = [NSString stringWithFormat:@"%@",responseObject[@"code"]];
                
                if ([code isEqualToString:@"200"]) {
                    
                    userInfo = [UserInformation mj_objectWithKeyValues:responseObject[@"data"][@"user"]];
                    
                    //7天内记住用户登录状态，将时间和useId存入NSUserDefaults
                    {
                        //获取当前时间
                        NSString *nowTime = [SmallFunctionTool transitionDateToString:[NSDate date]];
                        //加密userId
                        NSString *encryptStr = [EncryptForInterface encryptWithText:username];
                        NSString *PassWord = [EncryptForInterface encryptWithText:password];
                        
                        //存入NSUserDefaults文件中
                        NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
                        [userDefaults setObject:nowTime forKey:@"LoginDate"];
                        [userDefaults setObject:encryptStr forKey:@"LoginUserId"];
                        [userDefaults setObject:PassWord forKey:@"PassWord"];
                        [userDefaults synchronize]; //立即同步
                    }
                    
                    
                    
                } else {
                    
                    // 登录失败
                    dispatch_async(dispatch_get_main_queue(), ^{
                        
                        CYCnavController *nav = [[CYCnavController alloc] initWithRootViewController:[[LoginController alloc] init]];
                        [self presentViewController:nav animated:YES completion:nil];
                    });
                }
                
                [SVProgressHUD dismiss];
                
            } failure:^(NSError *error) {
                
                CYCnavController *nav = [[CYCnavController alloc] initWithRootViewController:[[LoginController alloc] init]];
                [self presentViewController:nav animated:YES completion:nil];
                
                //后台连接直接不成功，弹出“连接服务器失败”
                [SVProgressHUD dismiss];
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:@"网络异常：连接服务器失败"];
                
            }];
        }
    }
    
    
}


#pragma mark ========================================动作响应=============================================


#pragma mark ========================================网络请求=============================================



#pragma mark ========================================代理方法=============================================

- (NSInteger)numbersOfChildControllersInPageController:(WMPageController *)pageController {
//    return self.dataArray.count;
    return 10;
}

- (NSString *)pageController:(WMPageController *)pageController titleAtIndex:(NSInteger)index {
    return @"哈哈";
}


- (UIViewController *)pageController:(WMPageController *)pageController viewControllerAtIndex:(NSInteger)index {
    
    MainListController *vc = [[MainListController alloc] init];
    return vc;
    
    
}

- (void)pageController:(WMPageController *)pageController didEnterViewController:(__kindof UIViewController *)viewController withInfo:(NSDictionary *)info {
    
}

























@end
